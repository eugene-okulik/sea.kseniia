{"uid":"a48a906cef0cd64d","name":"test_add_new_object[body1]","fullName":"test_pytest#test_add_new_object","historyId":"6eb547078cb774f86907299be6b5d3f2","time":{"start":1756855989012,"stop":1756855989310,"duration":298},"status":"failed","statusMessage":"AssertionError: Status code is incorrect\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","statusTrace":"body = {'data': {'color': 'green', 'size': 'big'}, 'name': 'Test_green'}\n\n    @allure.feature('Object manupilaions')\n    @allure.story('Add new object')\n    @pytest.mark.parametrize('body', [\n        {\n            \"data\": {\n                \"color\": \"orange\",\n                \"size\": \"big\"\n            },\n            \"name\": \"Test_orange\"\n        },\n        {\n            \"data\": {\n                \"color\": \"green\",\n                \"size\": \"big\"\n            },\n            \"name\": \"Test_green\"\n        },\n        {\n            \"data\": {\n                \"color\": \"blue\",\n                \"size\": \"big\"\n            },\n            \"name\": \"Test_blue\"\n        }\n    ])\n    def test_add_new_object(body):\n        headers = {'Content-Type': 'application/json'}\n        with allure.step('Making a request'):\n            response = requests.post('http://objapi.course.qa-practice.com/object',\n                                    json=body, headers=headers)\n        with allure.step('Status check'):\n>           assert response.status_code == 400, 'Status code is incorrect'\nE           AssertionError: Status code is incorrect\nE           assert 200 == 400\nE            +  where 200 = <Response [200]>.status_code\n\ntest_pytest.py:70: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":7,"retriesStatusChange":true,"beforeStages":[{"name":"every_session","time":{"start":1756855988508,"stop":1756855988508,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"every_test","time":{"start":1756855989012,"stop":1756855989012,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"testStage":{"status":"failed","statusMessage":"AssertionError: Status code is incorrect\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","statusTrace":"body = {'data': {'color': 'green', 'size': 'big'}, 'name': 'Test_green'}\n\n    @allure.feature('Object manupilaions')\n    @allure.story('Add new object')\n    @pytest.mark.parametrize('body', [\n        {\n            \"data\": {\n                \"color\": \"orange\",\n                \"size\": \"big\"\n            },\n            \"name\": \"Test_orange\"\n        },\n        {\n            \"data\": {\n                \"color\": \"green\",\n                \"size\": \"big\"\n            },\n            \"name\": \"Test_green\"\n        },\n        {\n            \"data\": {\n                \"color\": \"blue\",\n                \"size\": \"big\"\n            },\n            \"name\": \"Test_blue\"\n        }\n    ])\n    def test_add_new_object(body):\n        headers = {'Content-Type': 'application/json'}\n        with allure.step('Making a request'):\n            response = requests.post('http://objapi.course.qa-practice.com/object',\n                                    json=body, headers=headers)\n        with allure.step('Status check'):\n>           assert response.status_code == 400, 'Status code is incorrect'\nE           AssertionError: Status code is incorrect\nE           assert 200 == 400\nE            +  where 200 = <Response [200]>.status_code\n\ntest_pytest.py:70: AssertionError","steps":[{"name":"Making a request","time":{"start":1756855989012,"stop":1756855989309,"duration":297},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"Status check","time":{"start":1756855989309,"stop":1756855989309,"duration":0},"status":"failed","statusMessage":"AssertionError: Status code is incorrect\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code\n","statusTrace":"  File \"/Users/kseniiatemnikova/Desktop/okulik homework/sea.kseniia/homework/kseniia_temnikova/Homework_20/test_pytest.py\", line 70, in test_add_new_object\n    assert response.status_code == 400, 'Status code is incorrect'\n","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentStep":false,"shouldDisplayMessage":true,"attachmentsCount":0}],"attachments":[{"uid":"e98872414650e05b","name":"stdout","source":"e98872414650e05b.txt","type":"text/plain","size":23}],"parameters":[],"stepsCount":2,"hasContent":true,"attachmentStep":false,"shouldDisplayMessage":true,"attachmentsCount":1},"afterStages":[{"name":"every_test::0","time":{"start":1756855989314,"stop":1756855989314,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"every_session::0","time":{"start":1756855993629,"stop":1756855993629,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"labels":[{"name":"feature","value":"Object manupilaions"},{"name":"story","value":"Add new object"},{"name":"suite","value":"test_pytest"},{"name":"host","value":"Kseniias-MacBook-Pro.local"},{"name":"thread","value":"97115-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_pytest"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"body","value":"{'data': {'color': 'green', 'size': 'big'}, 'name': 'Test_green'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"46641812c44e14e7","status":"failed","statusDetails":"AssertionError: Status code is incorrect\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1756848049578,"stop":1756848050028,"duration":450}},{"uid":"f74c6fa9c07ba1a5","status":"failed","statusDetails":"AssertionError: Status code is incorrect\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1756821659061,"stop":1756821659352,"duration":291}},{"uid":"d7fc112ed35da5","status":"passed","time":{"start":1756821584941,"stop":1756821585239,"duration":298}},{"uid":"c439b515faacad6c","status":"passed","time":{"start":1756821537989,"stop":1756821538304,"duration":315}},{"uid":"af5d3244126a0b51","status":"passed","time":{"start":1756821515339,"stop":1756821515650,"duration":311}},{"uid":"3adec29270e7d501","status":"passed","time":{"start":1756821478181,"stop":1756821478478,"duration":297}},{"uid":"2c088b41a7eee6ec","status":"passed","time":{"start":1756768394110,"stop":1756768394402,"duration":292}}],"categories":[{"name":"Product defects","matchedStatuses":[]}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":1,"unknown":0,"total":2},"items":[{"uid":"918b2b8d8a51a4fd","status":"passed","time":{"start":1756768394110,"stop":1756768394402,"duration":292}}]},"tags":[]},"source":"a48a906cef0cd64d.json","parameterValues":["{'data': {'color': 'green', 'size': 'big'}, 'name': 'Test_green'}"]}