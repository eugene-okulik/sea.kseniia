{"uid":"96feaa569dd9d328","name":"test_add_new_object[body2]","fullName":"test_pytest#test_add_new_object","historyId":"40f7adae44a15e1714439f2d545df164","time":{"start":1756821659356,"stop":1756821659646,"duration":290},"status":"failed","statusMessage":"AssertionError: Status code is incorrect\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","statusTrace":"body = {'data': {'color': 'blue', 'size': 'big'}, 'name': 'Test_blue'}\n\n    @pytest.mark.parametrize('body', [\n        {\n            \"data\": {\n                \"color\": \"orange\",\n                \"size\": \"big\"\n            },\n            \"name\": \"Test_orange\"\n        },\n        {\n            \"data\": {\n                \"color\": \"green\",\n                \"size\": \"big\"\n            },\n            \"name\": \"Test_green\"\n        },\n        {\n            \"data\": {\n                \"color\": \"blue\",\n                \"size\": \"big\"\n            },\n            \"name\": \"Test_blue\"\n        }\n    ])\n    def test_add_new_object(body):\n        headers = {'Content-Type': 'application/json'}\n        response = requests.post('http://objapi.course.qa-practice.com/object',\n                                 json=body, headers=headers)\n>       assert response.status_code == 400, 'Status code is incorrect'\nE       AssertionError: Status code is incorrect\nE       assert 200 == 400\nE        +  where 200 = <Response [200]>.status_code\n\ntest_pytest.py:64: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"every_session","time":{"start":1756821658738,"stop":1756821658738,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"every_test","time":{"start":1756821659356,"stop":1756821659356,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"testStage":{"status":"failed","statusMessage":"AssertionError: Status code is incorrect\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","statusTrace":"body = {'data': {'color': 'blue', 'size': 'big'}, 'name': 'Test_blue'}\n\n    @pytest.mark.parametrize('body', [\n        {\n            \"data\": {\n                \"color\": \"orange\",\n                \"size\": \"big\"\n            },\n            \"name\": \"Test_orange\"\n        },\n        {\n            \"data\": {\n                \"color\": \"green\",\n                \"size\": \"big\"\n            },\n            \"name\": \"Test_green\"\n        },\n        {\n            \"data\": {\n                \"color\": \"blue\",\n                \"size\": \"big\"\n            },\n            \"name\": \"Test_blue\"\n        }\n    ])\n    def test_add_new_object(body):\n        headers = {'Content-Type': 'application/json'}\n        response = requests.post('http://objapi.course.qa-practice.com/object',\n                                 json=body, headers=headers)\n>       assert response.status_code == 400, 'Status code is incorrect'\nE       AssertionError: Status code is incorrect\nE       assert 200 == 400\nE        +  where 200 = <Response [200]>.status_code\n\ntest_pytest.py:64: AssertionError","steps":[],"attachments":[{"uid":"6bc4a068d0a4ccba","name":"stdout","source":"6bc4a068d0a4ccba.txt","type":"text/plain","size":23}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentStep":false,"shouldDisplayMessage":true,"attachmentsCount":1},"afterStages":[{"name":"every_test::0","time":{"start":1756821659652,"stop":1756821659652,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"every_session::0","time":{"start":1756821663267,"stop":1756821663267,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"labels":[{"name":"suite","value":"test_pytest"},{"name":"host","value":"Kseniias-MacBook-Pro.local"},{"name":"thread","value":"94126-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_pytest"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"body","value":"{'data': {'color': 'blue', 'size': 'big'}, 'name': 'Test_blue'}"}],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"96feaa569dd9d328.json","parameterValues":["{'data': {'color': 'blue', 'size': 'big'}, 'name': 'Test_blue'}"]}