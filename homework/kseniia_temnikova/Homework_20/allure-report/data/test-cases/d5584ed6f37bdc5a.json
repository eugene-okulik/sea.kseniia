{"uid":"d5584ed6f37bdc5a","name":"test_add_new_object[body0]","fullName":"test_pytest#test_add_new_object","historyId":"a362b87dbec392adac891ac762389b88","time":{"start":1756821658739,"stop":1756821659037,"duration":298},"status":"failed","statusMessage":"AssertionError: Status code is incorrect\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","statusTrace":"body = {'data': {'color': 'orange', 'size': 'big'}, 'name': 'Test_orange'}\n\n    @pytest.mark.parametrize('body', [\n        {\n            \"data\": {\n                \"color\": \"orange\",\n                \"size\": \"big\"\n            },\n            \"name\": \"Test_orange\"\n        },\n        {\n            \"data\": {\n                \"color\": \"green\",\n                \"size\": \"big\"\n            },\n            \"name\": \"Test_green\"\n        },\n        {\n            \"data\": {\n                \"color\": \"blue\",\n                \"size\": \"big\"\n            },\n            \"name\": \"Test_blue\"\n        }\n    ])\n    def test_add_new_object(body):\n        headers = {'Content-Type': 'application/json'}\n        response = requests.post('http://objapi.course.qa-practice.com/object',\n                                 json=body, headers=headers)\n>       assert response.status_code == 400, 'Status code is incorrect'\nE       AssertionError: Status code is incorrect\nE       assert 200 == 400\nE        +  where 200 = <Response [200]>.status_code\n\ntest_pytest.py:64: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"every_test","time":{"start":1756821658738,"stop":1756821658738,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"every_session","time":{"start":1756821658738,"stop":1756821658738,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"testStage":{"status":"failed","statusMessage":"AssertionError: Status code is incorrect\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","statusTrace":"body = {'data': {'color': 'orange', 'size': 'big'}, 'name': 'Test_orange'}\n\n    @pytest.mark.parametrize('body', [\n        {\n            \"data\": {\n                \"color\": \"orange\",\n                \"size\": \"big\"\n            },\n            \"name\": \"Test_orange\"\n        },\n        {\n            \"data\": {\n                \"color\": \"green\",\n                \"size\": \"big\"\n            },\n            \"name\": \"Test_green\"\n        },\n        {\n            \"data\": {\n                \"color\": \"blue\",\n                \"size\": \"big\"\n            },\n            \"name\": \"Test_blue\"\n        }\n    ])\n    def test_add_new_object(body):\n        headers = {'Content-Type': 'application/json'}\n        response = requests.post('http://objapi.course.qa-practice.com/object',\n                                 json=body, headers=headers)\n>       assert response.status_code == 400, 'Status code is incorrect'\nE       AssertionError: Status code is incorrect\nE       assert 200 == 400\nE        +  where 200 = <Response [200]>.status_code\n\ntest_pytest.py:64: AssertionError","steps":[],"attachments":[{"uid":"90ddfcd053190f59","name":"stdout","source":"90ddfcd053190f59.txt","type":"text/plain","size":37}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentStep":false,"shouldDisplayMessage":true,"attachmentsCount":1},"afterStages":[{"name":"every_test::0","time":{"start":1756821659059,"stop":1756821659059,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"every_session::0","time":{"start":1756821663267,"stop":1756821663267,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"labels":[{"name":"suite","value":"test_pytest"},{"name":"host","value":"Kseniias-MacBook-Pro.local"},{"name":"thread","value":"94126-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_pytest"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"body","value":"{'data': {'color': 'orange', 'size': 'big'}, 'name': 'Test_orange'}"}],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"d5584ed6f37bdc5a.json","parameterValues":["{'data': {'color': 'orange', 'size': 'big'}, 'name': 'Test_orange'}"]}