{"uid":"6d376e2fcaf46ea3","name":"test_add_new_object[body0]","fullName":"test_pytest#test_add_new_object","historyId":"a362b87dbec392adac891ac762389b88","time":{"start":1756855988509,"stop":1756855988981,"duration":472},"status":"failed","statusMessage":"AssertionError: Status code is incorrect\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","statusTrace":"body = {'data': {'color': 'orange', 'size': 'big'}, 'name': 'Test_orange'}\n\n    @allure.feature('Object manupilaions')\n    @allure.story('Add new object')\n    @pytest.mark.parametrize('body', [\n        {\n            \"data\": {\n                \"color\": \"orange\",\n                \"size\": \"big\"\n            },\n            \"name\": \"Test_orange\"\n        },\n        {\n            \"data\": {\n                \"color\": \"green\",\n                \"size\": \"big\"\n            },\n            \"name\": \"Test_green\"\n        },\n        {\n            \"data\": {\n                \"color\": \"blue\",\n                \"size\": \"big\"\n            },\n            \"name\": \"Test_blue\"\n        }\n    ])\n    def test_add_new_object(body):\n        headers = {'Content-Type': 'application/json'}\n        with allure.step('Making a request'):\n            response = requests.post('http://objapi.course.qa-practice.com/object',\n                                    json=body, headers=headers)\n        with allure.step('Status check'):\n>           assert response.status_code == 400, 'Status code is incorrect'\nE           AssertionError: Status code is incorrect\nE           assert 200 == 400\nE            +  where 200 = <Response [200]>.status_code\n\ntest_pytest.py:70: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":7,"retriesStatusChange":true,"beforeStages":[{"name":"every_test","time":{"start":1756855988508,"stop":1756855988508,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"every_session","time":{"start":1756855988508,"stop":1756855988508,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"testStage":{"status":"failed","statusMessage":"AssertionError: Status code is incorrect\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","statusTrace":"body = {'data': {'color': 'orange', 'size': 'big'}, 'name': 'Test_orange'}\n\n    @allure.feature('Object manupilaions')\n    @allure.story('Add new object')\n    @pytest.mark.parametrize('body', [\n        {\n            \"data\": {\n                \"color\": \"orange\",\n                \"size\": \"big\"\n            },\n            \"name\": \"Test_orange\"\n        },\n        {\n            \"data\": {\n                \"color\": \"green\",\n                \"size\": \"big\"\n            },\n            \"name\": \"Test_green\"\n        },\n        {\n            \"data\": {\n                \"color\": \"blue\",\n                \"size\": \"big\"\n            },\n            \"name\": \"Test_blue\"\n        }\n    ])\n    def test_add_new_object(body):\n        headers = {'Content-Type': 'application/json'}\n        with allure.step('Making a request'):\n            response = requests.post('http://objapi.course.qa-practice.com/object',\n                                    json=body, headers=headers)\n        with allure.step('Status check'):\n>           assert response.status_code == 400, 'Status code is incorrect'\nE           AssertionError: Status code is incorrect\nE           assert 200 == 400\nE            +  where 200 = <Response [200]>.status_code\n\ntest_pytest.py:70: AssertionError","steps":[{"name":"Making a request","time":{"start":1756855988509,"stop":1756855988978,"duration":469},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"Status check","time":{"start":1756855988979,"stop":1756855988979,"duration":0},"status":"failed","statusMessage":"AssertionError: Status code is incorrect\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code\n","statusTrace":"  File \"/Users/kseniiatemnikova/Desktop/okulik homework/sea.kseniia/homework/kseniia_temnikova/Homework_20/test_pytest.py\", line 70, in test_add_new_object\n    assert response.status_code == 400, 'Status code is incorrect'\n","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentStep":false,"shouldDisplayMessage":true,"attachmentsCount":0}],"attachments":[{"uid":"334d6a338a6251ec","name":"stdout","source":"334d6a338a6251ec.txt","type":"text/plain","size":37}],"parameters":[],"stepsCount":2,"hasContent":true,"attachmentStep":false,"shouldDisplayMessage":true,"attachmentsCount":1},"afterStages":[{"name":"every_test::0","time":{"start":1756855989010,"stop":1756855989010,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"every_session::0","time":{"start":1756855993629,"stop":1756855993629,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"labels":[{"name":"feature","value":"Object manupilaions"},{"name":"story","value":"Add new object"},{"name":"suite","value":"test_pytest"},{"name":"host","value":"Kseniias-MacBook-Pro.local"},{"name":"thread","value":"97115-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_pytest"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"body","value":"{'data': {'color': 'orange', 'size': 'big'}, 'name': 'Test_orange'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"a503d1d102f93aa8","status":"failed","statusDetails":"AssertionError: Status code is incorrect\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1756848049137,"stop":1756848049558,"duration":421}},{"uid":"d5584ed6f37bdc5a","status":"failed","statusDetails":"AssertionError: Status code is incorrect\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code","time":{"start":1756821658739,"stop":1756821659037,"duration":298}},{"uid":"1bc26637b95570a6","status":"passed","time":{"start":1756821584613,"stop":1756821584934,"duration":321}},{"uid":"5fd1b9f7114ed2ca","status":"passed","time":{"start":1756821537685,"stop":1756821537985,"duration":300}},{"uid":"66cd12d9adffefe8","status":"passed","time":{"start":1756821515051,"stop":1756821515337,"duration":286}},{"uid":"2aa021b2e52eb117","status":"passed","time":{"start":1756821477729,"stop":1756821478178,"duration":449}},{"uid":"d12144752a338fc6","status":"passed","time":{"start":1756768393717,"stop":1756768394106,"duration":389}}],"categories":[{"name":"Product defects","matchedStatuses":[]}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":1,"unknown":0,"total":2},"items":[{"uid":"3088740828ec661a","status":"passed","time":{"start":1756768393717,"stop":1756768394106,"duration":389}}]},"tags":[]},"source":"6d376e2fcaf46ea3.json","parameterValues":["{'data': {'color': 'orange', 'size': 'big'}, 'name': 'Test_orange'}"]}